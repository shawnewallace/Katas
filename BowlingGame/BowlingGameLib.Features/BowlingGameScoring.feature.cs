// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace BowlingGameLib.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bowling Game Scoring")]
    public partial class BowlingGameScoringFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BowlingGameScoring.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Bowling Game Scoring", "So that I can see my score\r\nAs a Bowler playing a game\r\nI want to have my game sc" +
                    "ored", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("0 Rolls")]
        public virtual void _0Rolls()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0 Rolls", ((string[])(null)));
#line 7
 this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given("I make no rolls");
#line 9
  testRunner.When("I score it");
#line 10
  testRunner.Then("My score should be 0");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 roll")]
        public virtual void _1Roll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 roll", ((string[])(null)));
#line 12
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "roll"});
            table1.AddRow(new string[] {
                        "2"});
#line 13
  testRunner.Given("I make the following rolls:", ((string)(null)), table1);
#line 16
  testRunner.When("I score it");
#line 17
  testRunner.Then("My score should be 2");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2 rolls")]
        public virtual void _2Rolls()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2 rolls", ((string[])(null)));
#line 19
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "roll"});
            table2.AddRow(new string[] {
                        "6"});
            table2.AddRow(new string[] {
                        "3"});
#line 20
  testRunner.Given("I make the following rolls:", ((string)(null)), table2);
#line 24
  testRunner.When("I score it");
#line 25
  testRunner.Then("My score should be 9");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("with no spares or strikes")]
        public virtual void WithNoSparesOrStrikes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("with no spares or strikes", ((string[])(null)));
#line 27
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "roll"});
            table3.AddRow(new string[] {
                        "1"});
            table3.AddRow(new string[] {
                        "4"});
            table3.AddRow(new string[] {
                        "4"});
            table3.AddRow(new string[] {
                        "5"});
#line 28
  testRunner.Given("I make the following rolls:", ((string)(null)), table3);
#line 34
  testRunner.When("I score it");
#line 35
  testRunner.Then("My score should be 14");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("with spares and strikes")]
        public virtual void WithSparesAndStrikes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("with spares and strikes", ((string[])(null)));
#line 37
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "roll"});
            table4.AddRow(new string[] {
                        "1"});
            table4.AddRow(new string[] {
                        "4"});
            table4.AddRow(new string[] {
                        "4"});
            table4.AddRow(new string[] {
                        "5"});
            table4.AddRow(new string[] {
                        "6"});
            table4.AddRow(new string[] {
                        "4"});
            table4.AddRow(new string[] {
                        "5"});
            table4.AddRow(new string[] {
                        "5"});
            table4.AddRow(new string[] {
                        "10"});
            table4.AddRow(new string[] {
                        "0"});
            table4.AddRow(new string[] {
                        "1"});
            table4.AddRow(new string[] {
                        "7"});
            table4.AddRow(new string[] {
                        "3"});
            table4.AddRow(new string[] {
                        "6"});
            table4.AddRow(new string[] {
                        "4"});
            table4.AddRow(new string[] {
                        "10"});
            table4.AddRow(new string[] {
                        "2"});
            table4.AddRow(new string[] {
                        "8"});
            table4.AddRow(new string[] {
                        "6"});
#line 38
  testRunner.Given("I make the following rolls:", ((string)(null)), table4);
#line 59
  testRunner.When("I score it");
#line 60
  testRunner.Then("My score should be 133");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("a perfect game")]
        public virtual void APerfectGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("a perfect game", ((string[])(null)));
#line 62
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "roll"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
            table5.AddRow(new string[] {
                        "10"});
#line 63
  testRunner.Given("I make the following rolls:", ((string)(null)), table5);
#line 77
  testRunner.When("I score it");
#line 78
  testRunner.Then("My score should be 300");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("another perfect game")]
        public virtual void AnotherPerfectGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("another perfect game", ((string[])(null)));
#line 80
 this.ScenarioSetup(scenarioInfo);
#line 81
  testRunner.Given("I make the following rolls: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10");
#line 82
  testRunner.When("I score it");
#line 83
  testRunner.Then("My score should be 300");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
